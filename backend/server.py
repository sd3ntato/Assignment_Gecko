from flask import Flask, request
import datetime
# from flask_cors import CORS
  
x = datetime.datetime.now()

import nltk
nltk.download('punkt')

import spacy
from spacy.lang.en import English
from textblob import TextBlob

from utils import compute_frequences, compute_proportions

# reading the corpus generated by GPT-3
with open( './sentences_delivery.txt' ) as sent_delivery:
  sent_delivery_lines = sent_delivery.readlines()
with open( './sentences_food.txt' ) as sent_food:
  sent_food_lines = sent_food.readlines()

# for the next operation I need to group the corpus into one big string
string_del = ''
for sentence in sent_delivery_lines:
  string_del += sentence
  
string_food = ''
for sentence in sent_food_lines:
  string_food += sentence
  
# compute a dictionary of frequencies. 
# each word is associated with the number of times it occurs in the
# corpus generated by GPT-3
freqs_del = compute_frequences(string_del) # frequencies in the delivery corpus
freqs_food = compute_frequences(string_food) # frequencies in the food corpus



# now for spacy. We need to define an nlp pipline. 
# In our case it's very simple because we just need the sentence splitter
nlp = English()

# these are not really chars but to make atomic sentences I wanted to slpit around conjuction words
# anyway, these are the carachters that nlp pipline uses to split a text into sentences
punt_chars = ['!', ',', '.', '?', ':', ' while ','but', 'yet', ' nor ', ' for ', ' although ', ' however ', ' while ', ' whereas ', ' though ', ' although ' ]

# tell nlp pipline to split sentences around these charachters
config = {"punct_chars": punt_chars}
nlp.add_pipe("sentencizer", config=config)
 

# this is the function that will split the sentence, assign topics and polarity, and deliver results
def process(target):
    res = []
    
    for sentence in nlp(target).sents:
        str_sentence = str(sentence) # sentence is of type spaCy.Doc
        
        # remove the conjunction words because they are a little bit ugly
        for char in punt_chars:
            str_sentence = str_sentence.replace(char, '')
            
        # print(str_sentence, compute_proportions(freqs_del,freqs_food, str_sentence) )
        # print( blob.sentences[0].sentiment.polarity )
        
        blob = TextBlob(str_sentence) # this computes the polarity
        
        res.append( {
            'str_sentence': str_sentence,                                       # sentence
            'props': compute_proportions(freqs_del,freqs_food, str_sentence),   # assigned distribution of topics
            'polarity': blob.sentences[0].sentiment.polarity                    # polarity
        } )
    return res
    



app = Flask(__name__)
# CORS(app)
  
@app.route('/data')
def get_time():
    try:
        text = request.args.get('text')
        text = text.replace('-',' ')
        
        ############################################################
        #########  return the processed text to the client #########
        return { 'res':process(text) }                             #
        ############################################################
      
    except Exception as e:
        print('exception', e)
        return {'res':'failed'}
  

if __name__ == '__main__':
    app.run( host='0.0.0.0', port=5001, debug=True)